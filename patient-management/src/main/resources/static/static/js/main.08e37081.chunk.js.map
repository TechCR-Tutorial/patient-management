{"version":3,"sources":["component/navbar.js","component/server.js","component/dailymanagement.js","component/useradd.js","component/report.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","BASE_URL","patient","phoneNo","firstName","lastName","getURL","console","log","axios","get","url","post","patientId","report","DailyManagement","props","ADDED_AND_REGISTERD","REGISTERD","onChangeFirstName","e","setState","target","value","validateState","state","length","onChangeLasttName","onChangePhoneNo","onChangeAddress","address","markForToday","Server","registerForToday","then","response","message","clearFields","search","searchPatients","data","recordsFound","patients","onSubmit","event","preventDefault","addPatientAndRegisterForToday","this","type","pattern","maxLength","minLength","required","placeholder","onChange","scope","map","key","id","onClick","UserAdd","server","addPatient","addedStatus","Report","onChangeFromDate","date","startDate","onChangeToDate","toDate","searchReports","endDate","reports","datePatients","Date","selected","datePatient","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.08e37081.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">Pation Manager</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"nav-link\">Day Manage</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/userAdd\" className=\"nav-link\">User Manage</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/report\" className=\"nav-link\">Report Manager</Link>\n          </li>\n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import axios from 'axios'\n\nexport const BASE_URL = \"http://localhost:8080/patients\"\n\nclass BackendService {\n    searchPatients(patient) {\n\n        var phoneNo = !patient.phoneNo ? \"*\" : patient.phoneNo\n        var firstName = !patient.firstName ? \"*\" : patient.firstName\n        var lastName = !patient.lastName ? \"*\" : patient.lastName\n\n        var getURL = `${BASE_URL}/${phoneNo}/${firstName}/${lastName}`\n        console.log(`Search URL ${getURL}`)\n        return axios.get(getURL)\n    }\n\n    addPatientAndRegisterForToday(patient) {\n        var url = `${BASE_URL}/daily`\n        return axios.post(url, patient)\n    }\n\n    registerForToday(patientId) {\n        var url = `${BASE_URL}/daily/${patientId}`\n        return axios.get(url)\n    }\n\n    addPatient(patient) {\n        var url = `${BASE_URL}`\n        return axios.post(url, patient)\n    }\n\n    reports(report) {\n        var url = `${BASE_URL}/reports`\n        return axios.post(url, report)\n    }\n}\n\nexport default new BackendService();","import React, { Component } from 'react';\nimport Server from './server'\n\nexport default class DailyManagement extends Component {\n\n    ADDED_AND_REGISTERD = \"Sucessfully added and registerd for today\"\n    REGISTERD = \"Sucessfully registerd for today\"\n\n    constructor(props) {\n        super(props);\n\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\n        //this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phoneNo: '',\n            address: '',\n            recordsFound: false,\n            patients: [],\n            message: ''\n        }\n    }\n\n    validateState(search) {\n        this.setState({message: ''})\n        if (search) {\n            this.search()\n        } else {\n            this.setState({ patients: [] })\n        }\n    }\n\n    onChangeFirstName = (e) => {\n\n        this.setState({\n            firstName: e.target.value\n        }, () => this.validateState(this.state.firstName.length > 3))\n\n    }\n\n    onChangeLasttName = (e) => {\n        this.setState({\n            lastName: e.target.value\n        }, () => this.validateState(this.state.lastName.length >= 3))\n    }\n\n    onChangePhoneNo = (e) => {\n        this.setState({\n            phoneNo: e.target.value\n        }, () => this.validateState(this.state.phoneNo.length >= 5))\n    }\n\n    onChangeAddress = (e) => {\n        this.setState({\n            address: e.target.value\n        })\n    }\n\n    markForToday = (patientId) => {\n        Server.registerForToday(patientId)\n            .then(response => {\n                this.setState({message : this.REGISTERD})\n                this.clearFields()\n            })\n    }\n\n    search = () => {\n        const patient = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            phoneNo: this.state.phoneNo\n        }\n        console.log(patient);\n        Server.searchPatients(patient)\n            .then(response => {\n                if (response.data.length > 0) {\n                    this.setState({\n                        recordsFound: false,\n                        patients: response.data\n                    })\n                } else {\n                    this.setState({\n                        recordsFound: true,\n                        patients: []\n                    })\n                }\n            })\n    }\n\n\n    onSubmit = (event) => {\n        console.log(\"submiting...\")\n        event.preventDefault();\n        const patient = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            phoneNo: this.state.phoneNo,\n            address: this.state.address\n        }\n        Server.addPatientAndRegisterForToday(patient)\n            .then(response => {\n                this.setState({ \n                    recordsFound: false,\n                    message: this.ADDED_AND_REGISTERD\n                 })\n                 this.clearFields()\n            })\n    }\n\n    clearFields = () => {\n        this.setState( {\n            firstName: '',\n            lastName: '',\n            address: '',\n            phoneNo: ''\n        })\n    }\n    render() {\n\n        return (\n            <div>\n                <br />\n                <h3>Find Pation</h3>\n                <br />\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-4\">\n                            <label >Phone Number</label>\n                            <input type=\"text\" pattern=\"\\d*\" maxLength=\"10\" minLength=\"10\" required className=\"form-control\"\n                                placeholder=\"Phone Number\" value={this.state.phoneNo} onChange={this.onChangePhoneNo} />\n                        </div>\n                        <div className=\"form-group col-md-4\">\n                            <label >First Name</label>\n                            <input type=\"text\" required className=\"form-control\" placeholder=\"First Name\" minLength=\"4\"\n                                value={this.state.firstName} onChange={this.onChangeFirstName} />\n                        </div>\n                        <div className=\"form-group col-md-4\">\n                            <label >Last Name</label>\n                            <input type=\"text\" required className=\"form-control\" placeholder=\"Last Name\" minLength=\"4\"\n                                value={this.state.lastName} onChange={this.onChangeLasttName} />\n                        </div>\n                    </div>\n                    {this.state.recordsFound &&\n                        <div><div className=\"form-group\">\n                            <label >Address</label>\n                            <input type=\"text\" required className=\"form-control\" placeholder=\"Address\" minLength=\"4\"\n                                value={this.state.address} onChange={this.onChangeAddress} />\n                        </div>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-2\">\n                                    <input type=\"submit\" value=\"Register And Mark\" className=\"btn  btn-secondary\" />\n                                </div>\n                            </div>\n\n                        </div>\n\n                    }\n                    {this.state.message && <div className=\"alert alert-success\"> {this.state.message}</div> }\n\n                </form>\n                <br />\n\n                <br />\n                <div className=\"container\">\n                    <table className=\"table table-striped table-hover\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Phone No</th>\n                                <th scope=\"col\">First Name</th>\n                                <th scope=\"col\">Last Name</th>\n                                <th scope=\"col\">Address</th>\n                                <th scope=\"col\"></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.patients.map(\n                                patient =>\n                                    <tr key={patient.id}>\n                                        <th scope=\"col\"> {patient.phoneNo} </th>\n                                        <th scope=\"col\"> {patient.firstName} </th>\n                                        <th scope=\"col\"> {patient.lastName} </th>\n                                        <th scope=\"col\"> {patient.address} </th>\n                                        <th scope=\"col\"> <button className=\"btn btn-secondary\"\n                                            onClick={() => this.markForToday(patient.id)}> Mark </button> </th>\n                                    </tr>\n                            )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport server from './server';\n\nexport default class UserAdd extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\n        //this.onSubmit = this.onSubmit.bind(this);\n        //console.log('test construce')\n        this.state = {\n            firstName: '',\n            lastName: '',\n            phoneNo: '',\n            address: '',\n            addedStatus: false\n        }\n\n    }\n\n    validateState() {\n        this.setState({ addedStatus: false })\n    }\n\n    onChangeFirstName = (e) => {\n        this.setState({\n            firstName: e.target.value\n        }, () => this.validateState())\n    }\n\n    onChangeLasttName = (e) => {\n        this.setState({\n            lastName: e.target.value\n        }, () => this.validateState())\n    }\n\n    onChangePhoneNo = (e) => {\n        this.setState({\n            phoneNo: e.target.value\n        }, () => this.validateState())\n    }\n\n    onChangeAddress = (e) => {\n        this.setState({\n            address: e.target.value\n        }, () => this.validateState())\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        const patient = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            phoneNo: this.state.phoneNo,\n            address: this.state.address\n        }\n        server.addPatient(patient)\n            .then(response => {\n                this.setState({ addedStatus: true })\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <h3>Register New Pation</h3>\n                <br />\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            <label >First Name</label>\n                            <input type=\"text\" required className=\"form-control\" placeholder=\"First Name\" minLength=\"4\"\n                                value={this.state.firstName} onChange={this.onChangeFirstName} />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label >Last Name</label>\n                            <input type=\"text\" required className=\"form-control\" placeholder=\"Last Name\" minLength=\"4\"\n                                value={this.state.lastName} onChange={this.onChangeLasttName} />\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            <label >Phone Number</label>\n                            <input type=\"text\" pattern=\"\\d*\" maxLength=\"10\" minLength=\"10\" required className=\"form-control\"\n                                placeholder=\"Phone Number\" value={this.state.phoneNo} onChange={this.onChangePhoneNo} />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <label >Address</label>\n                        <input type=\"text\" required className=\"form-control\" placeholder=\"Address\" minLength=\"4\"\n                            value={this.state.address} onChange={this.onChangeAddress} />\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-2\">\n                            <input type=\"submit\" value=\"Register\" className=\"btn  btn-secondary\" />\n                        </div>\n                    </div>\n\n                </form>\n                { this.state.addedStatus &&  <div className=\"alert alert-success\"> Patient Register Sucesfully </div> }\n            </div>\n\n            \n        );\n    }\n}\n\n","import React, { Component } from 'react'\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport server from './server';\n\n\nexport default class Report extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //this.onChangeUsername = this.onChangeUsername.bind(this);\n        //this.onSubmit = this.onSubmit.bind(this);\n        //console.log('test construce')\n        this.state = {\n            startDate: new Date(),\n            toDate: new Date(),\n            datePatients: []\n        }\n\n    }\n\n    onChangeFromDate = (date) => {\n        this.setState({ startDate: date })\n    }\n\n    onChangeToDate = (date) => {\n        this.setState({ toDate: date })\n    }\n\n    searchReports = (e) => {\n        const report = {\n            startDate: this.state.startDate,\n            endDate: this.state.toDate\n        }\n        console.log(report)\n        server.reports(report)\n            .then(response => {\n                console.log(response)\n                this.setState({datePatients: response.data})\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <h3>Find Pation</h3>\n                <br />\n                <form>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-4\">\n                            <label >{`From  Date `}</label>\n                            <DatePicker className=\"form-control\" selected={this.state.startDate} onChange={this.onChangeFromDate} />\n                        </div>\n                        <div className=\"form-group col-md-4\">\n                            <label >To Date</label>\n                            <DatePicker className=\"form-control\" selected={this.state.toDate} onChange={this.onChangeToDate} />\n                        </div>\n                    </div>\n\n                </form>\n                <div className=\"form-row\">\n                    <div className=\"form-group col-md-2\">\n                        <button className=\"btn btn-secondary\" onClick={this.searchReports}> Search </button>\n                    </div>\n                </div>\n                <br />\n\n                <br />\n                <div className=\"container\">\n                    <table className=\"table table-striped table-hover\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Date</th>\n                                <th scope=\"col\">Phone No</th>\n                                <th scope=\"col\">First Name</th>\n                                <th scope=\"col\">Last Name</th>\n                                <th scope=\"col\">Address</th>\n                                <th scope=\"col\"></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.datePatients.map(\n                                datePatient =>\n                                    <tr key={datePatient.id}>\n                                        <th scope=\"col\"> {datePatient.date} </th>\n                                        <th scope=\"col\"> {datePatient.patient.phoneNo} </th>\n                                        <th scope=\"col\"> {datePatient.patient.firstName} </th>\n                                        <th scope=\"col\"> {datePatient.patient.lastName} </th>\n                                        <th scope=\"col\"> {datePatient.patient.address} </th>\n                                    </tr>\n                            )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Navbar from './component/navbar';\nimport DailyManagement from './component/dailymanagement';\nimport UserAdd from './component/useradd';\nimport Report from './component/report';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Navbar />\n        <Route path=\"/\" exact component={DailyManagement} />\n        <Route path=\"/userAdd\" component={UserAdd} />\n        <Route path=\"/report\" component={Report} />\n        {/* <Route path=\"/userAdd/:phoneNo/:firstName/:lastName\" component={UserAdd} /> */}\n        {/* <Route path=\"/create\" component={CreateExercise} /> */}\n        {/* <Route path=\"/user\" component={CreateUser} /> */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}